1100/1.645
23/1.645
1100 - (1.96)*14
1100 + (1.96)*14
0.01/0.004
1.645-2
1.645-2.5
pnorm(-0.855,lower.tail=FALSE)
?qnorm
qnorm(0.9,lower.tail=FALSE)
pnorm(-1.281552,lower.tail=FALSE)
1.281552*0.04
1.645*0.04
0.05126208 + 0.0658
0.1170621/0.01
power.t.test(power=.9, delta=.1, sd=.04, type="one.sample", alt="one.sided")
power.t.test(power=.9, delta=.01, sd=.04, type="one.sample", alt="one.sided")
md = 44-42.04
df = 288+288 -2
var <- (12^2+12^2)/df
sediff <- sqrt(var/288 + var/288)
x <- md/sediff
2*pt(x,df=df)
md
sediff
var
x
var <- (12^2 * 287 + 12^2 * 287)
sediff <- sqrt(var/288 + var/288)
x <- md/sediff
2*pt(x,df=df)
var <- (12^2 * 287 + 12^2 * 287)/df
sediff <- sqrt(var/288 + var/288)
x <- md/sediff
2*pt(x,df=df)
sediff
df
var
md
(12^2 * 287 + 12^2 * 287)/df
12^2
144*287
2*144*287
82656/df
2*pt(x,df=df)
sediff
md
1.96 * 10
1.645*10
1100-19.6
1100+19.6
pbinom(2,size=4,prob=0.5,lower.tail=FALSE)
ppois(9,17.87,lower.tail=TRUE)
?t.power
0.05*10
0.005 * 10
0.0005 * 10
md <- 42.04-44
x <- md/sediff
2*pt(x,df=df)
md
sediff
?power.t.test
power.t.test(delta=0.01,sd=0.04,sig.level=0.1,power=0.9,alternative="one.sided")
9/12
power.t.test(delta=0.01,sd=0.04,power=0.9,alternative="one.sided")
1100+`6.45
''
`
1100+16.45
1100+12.8
1123-1100
1100-1077
ppois(9, 5, lower.tail = FALSE)
1/100
0.01*1787
ppois(9, 17.87, lower.tail = FALSE)
ppois(9, 17.87, lower.tail = TRUE)
0.04/sqrt(275)
0.01/0.002412091
1.645 - 4.145781
pnorm(-2.500781,lower.tail=FALSE)
pnorm(-2,lower.tail=FALSE)
pnorm(-1.5,lower.tail=FALSE)
pnorm(-1.25,lower.tail=FALSE)
pnorm(-1.26,lower.tail=FALSE)
pnorm(-1.3,lower.tail=FALSE)
1.645+1.3
2.945 * 0.04/0.01
11.78 ^ 2
ppois(10, 17.87, lower.tail = FALSE)
ppois(10, 17.87, lower.tail = TRUE)
power.t.test(power=.9, delta=.01, sd=.04, type="one.sample", alt="one.sided")$n
?dist
?I
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y~x)
summary(fit)$coefficients
summary(fit)$sigma
data(mtcars)
mtcars$wt
mtcars$mgp
mtcars$mpg
y <- mtcars$mpg
x <- mtcars$wt
x
y
fit <- lm(y~x)
fit
sumCoef <- summary(fit)$coefficients
sumCoef
sumCoef[2,1]
sumCoef[2,2]
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]
fit$df
?mtcars
mtcars$wt
M <- mean(x)
predict(fit , newdata = data.frame(x=M), interval="confidence")
M
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]
summary(mtcars$mpg)
?summary
predict(fit , newdata = data.frame(x=3), interval="confidence")
M
predict(fit , newdata = data.frame(x=3), interval="predict")
-6.486*2
resid(fit)
cor(y,x)
cor(y,x)^2
beta1 =cor(y,x)∗sd(y)/sd(x)
beta1 = cor(y,x)∗sd(y)/sd(x)
beta1 =cor(y,x)*sd(y)/sd(x)
beta0 =mean(y)−beta1*mean(x)
e1 = y−beta0−beta1*x
ssq1 =sum(e2)
beta1 = cor(y,x)*sd(x)/sd(y)
beta0 = mean(y) - beta1*mean(x)
e1 = y-beta0-beta1*x
ssq1 = sum(e^2)
ssq1 = sum(e1^2)
ssq1
e2 = y-mean(y)
ssq2=sum(e2^2)
ssq2
ssq2/ssq1
ssq1/ssq2
mean(y)
mean(mtcars$mpg)
(y-mean(y))^2
sum((y-mean(y))^2)
sqrt(ssq2)
sqrt(ssq1)
32/33
33/32
x-mean(x)
sum((x-mean(x))^2)
ssq1
ssq1/29.67
1081.95/(n-2)
1081.95/(18)
29.67875/60
sqrt(ssq2/ssq1)
sqrt(ssq1/ssq2)
beta1
beta0
y-beta0-beta1*x
e <- y-beta0-beta1*x
sum(e^2)
sum((y-mean(y))^2
)
sum((y-mean(y))^2)
1126/1082
1082/1126
fit(y~x)
lm(y~x)
fit <- lm(y~x)
summary(fit)
resid(fit)
sum(resid(fit)^2)
predict(fit)
lm(y~mean(y))
lm(y~data.frame=mean(y))
z<- data.frame(mean(y))
lm(y~z)
z
e
y
beta0
beta1
x
?resid
1126/278
278/1126
cor8y,x
cor(y,x)
sd(y)/sd(x)
beta1
6.159*-0.86
y
x
-0.8676594 * 6.159643
cor(y,x)*sd(y)/sd(x)
beta1 <- cor(y,x)*sd(y)/sd(x)
e <- y-beta0-beta1*x
sum(e^2)
beta0
e
resid(fit)
beta0 <- mean(y) - beta1*mean(x)
e <- y-beta0-beta1*x
sum(e^2)
y=c(1:10)
x=y-1+rnorm(10)/10
z=c(1:10)
z=z*2
summary(lm(y~x+offset(z)))
z=z*4
summary(lm(y~x+offset(z)))
z=z+5
summary(lm(y~x+offset(z)))
z=z+100
summary(lm(y~x+offset(z)))
z=z/10
summary(lm(y~x+offset(z)))
?offset
library(devtools)
install.packages(devtools)
require(rCharts)
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages("devtools")
require(devtools)
install_github('rCharts', 'ramnathv')
library(googleVis)
install.packages("googleVis")
library(googleVis)
M <- gvisMotionChart(Fruits,"Fruit","Year",options=list(width=600,height=400))
print(M,"chart")
?print
getwd()
M
class(M)
str(M)
print(M)
print("M",chart)
print(M,"chart")
plot(M)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
data(airquality)
dTable(airquality, sPaginationType = "full_numbers")
d
require(rCharts)
dTable(airquality, sPaginationType = "full_numbers")
install_github('slidify','ramnathv')
install_github('slidifyLibraries','ramnathv')
library(slidify)
install.packages("shiny")
library(shiny)
version()
ver()
setwd("/Users/msattarwala/coursera/data-products")
runApp()
runApp()
runApp()
runApp()
runApp()
install_github('slidify','ramnathv')
install_github('slidifyLibraries','ramnathv')
library(slidify)
setwd('/Users/msattarwala/coursera/data-products/sample/project')
author('first_deck')
data(mtcars)
head(mtcars)
qplot(cyl,hwy, data=mtcars)
library(ggplot2)
qplot(cyl,hwy, data=mtcars)
qplot(cyl,mpg, data=mtcars)
qplot(cyl,disp, data=mtcars)
data(mpg)
head(mpg)
?mpg
fit1 <- lm(mpg~am, data=mtcars)
plot(fit1)
plot(fit1)
fit1
fit1$coeff
?anova
fit2 <- lm(mpg ~ as.factor(am) + wt, data = mtcars)
anova(fit1,fit2)
summary(fit1)$coeff
anova(fit1,fit2)
anova(fit1,fit2)"$Pr(>F)"
anova(fit1,fit2)"$Pr(>F)"[2]
anova(fit1,fit2)$"Pr(>F)"[2]
anova(fit1,fit2)$"Pr(>F)"
anova(fit1,fit2)$Pr(>F)
anova(fit1,fit2)$"Pr(>F)""
""
anova(fit1,fit)
anova(fit1,fit2)
c("a","b")
x <- c("a","b")
paste(x, sep="+")
paste(x, sep="+",collapse)
paste(x, sep="+",collapse)
?sapply
sapply(x,paste(x,sep="+"))
sapply(x,function() {paste(x,sep="+")})
sapply(x,function() {paste(x,sep="+")})
paste(x, collapse = '+')
?mtcars
library(mtcars)
data(mtcars)
coplot(mpg ~ disp | as.factor(cyl), data = mtcars,
panel = panel.smooth, rows = 1)
plot(mpg~am,data=mtcars)
coplot(mpg~am,data=mtcars)
coplot(mpg ~ disp | as.factor(cyl), data = mtcars,
panel = panel.smooth, rows = 1)
x <- 'mpg ~ am'
lm(x,data=mtcars)
?mtcars
length(x)
x
x <- c()
length(x)
x <- c('a','b')
length(x)
library(shiny)
runApp("~/coursera/data-products/project")
runApp("~/coursera/data-products/project")
runApp("~/coursera/data-products/project")
runApp("~/coursera/data-products/project")
?anova
anova(fit1,fit2)
anova(fit1,fit2)
runApp("~/coursera/data-products/project")
install.packages("shinyapps")
devtools::install_github('rstudio/shinyapps')
library("shinyapps")
shinyapps::setAccountInfo(
name="attarwala",
token="9BA3C64A93D3759CE15E8EC0EADF967B",
secret="<SECRET>")
shinyapps::setAccountInfo(name='attarwala', token='9BA3C64A93D3759CE15E8EC0EADF967B', secret='O2KI4Ud7L6jEMLtu3EWtaUOYhHXvmVParjdGDn7x')
?mtcars
runApp("~/coursera/data-products/project")
doc <- tags$html(
tags$head(
tags$title('My first page')
),
tags$body(
h1('My first heading'),
p('My first paragraph, with some ',
strong('bold'),
' text.'),
div(id='myDiv', class='simpleDiv',
'Here is a div with some attributes.')
)
)
cat(as.character(doc))
runApp("~/coursera/data-products/project")
runApp("~/coursera/data-products/project")
runApp("~/coursera/data-products/project")
runApp("~/coursera/data-products/project")
runApp("~/coursera/data-products/project")
runApp("~/coursera/data-products/project")
runApp("~/coursera/data-products/project")
runApp("~/coursera/data-products/project")
runApp("~/coursera/data-products/project")
runApp("~/coursera/data-products/project")
runApp("~/coursera/data-products/project")
runApp("~/coursera/data-products/project")
runApp("~/coursera/data-products/project")
?deployApp
deployApp("~/coursera/data-products/project")
runApp("~/coursera/data-products/project")
deployApp("~/coursera/data-products/project")
setwd("/Users/msattarwala/coursera/data-products/project/slidify")
getwd()
require('slidify')
require('slidifyLibraries')
author("linear_regression")
slidify(index.Rmd)
getwd()
slidify("index.Rmd")
browseURL(index.html)
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
getwd()
setwd("/Users/msattarwala/coursera/data-products/sample/project/first_deck")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
setwd("/Users/msattarwala/coursera/data-products/project/slidify/linear_regression)
""
)
"
setwd("/Users/msattarwala/coursera/data-products/project/slidify/linear_regression")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
?size
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
publish(user="attarwala",repo="slidify",host='github')
publish(user="attarwala",repo="slidify",host='github')
